# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])



Vulnerability.create(alias: "xss", name: "Cross Site Scripting - XSS", description: "Cross-site scripting (XSS) is a type of computer security vulnerability typically found in web applications. XSS enables attackers to inject client-side scripts into web pages viewed by other users. A cross-site scripting vulnerability may be used by attackers to bypass access controls such as the same-origin policy. Cross-site scripting carried out on websites accounted for roughly 84% of all security vulnerabilities documented by Symantec as of 2007.", prevention: "<p>Preventing XSS requires separation of untrusted data from active browser content.</p><ul>
<li>Use safer frameworks that automatically escape for XSS by design, such as in Ruby 3.0 or React JS.</li>
<li>Escaping untrusted HTTP request data based on the context in the HTML output (body, attribute, JavaScript, CSS, or URL) will resolve Reflected and Stored XSS vulnerabilities. The OWASP XSS Prevention Cheat Sheet has details on the required data escaping techniques.</li>
<li>Applying context sensitive encoding when modifying the browser document on the client side acts against DOM XSS. When this cannot be avoided, similar context sensitive escaping techniques can be applied to browser APIs as described in the OWASP DOM based XSS Prevention Cheat Sheet.</li>
<li>Enabling a Content Security Policy (CSP) is a defense in depth mitigating control against XSS, assuming no other vulnerabilities exist that would allow placing malicious code via local file include such as path traversal overwrites, or vulnerable libraries in permitted sources, such as content delivery network or local libraries.</li></ul>")

Vulnerability.create(alias: "blindsqli", name: "Blind SQL Injection", description: "Blind SQL (Structured Query Language) injection is a type of SQL Injection attack that asks the database true or false questions and determines the answer based on the applications response. This attack is often used when the web application is configured to show generic error messages, but has not mitigated the code that is vulnerable to SQL injection. When an attacker exploits SQL injection, sometimes the web application displays error messages from the database complaining that the SQL Query's syntax is incorrect. Blind SQL injection is nearly identical to normal SQL Injection, the only difference being the way the data is retrieved from the database. When the database does not output data to the web page, an attacker is forced to steal data by asking the database a series of true or false questions. This makes exploiting the SQL Injection vulnerability more difficult, but not impossible.", prevention: "")


Analysis.create(url: 'http://www.xyzpub.com/en/ruby-on-rails/', is_scan_completed: 0, analysis_date: '2018-04-10 01:01:23.442000', user_id: 1)
Analysis.create(url: 'https://www.raywenderlich.com', is_scan_completed: 1, analysis_date: '2018-06-11 01:01:23.442000', user_id: 1)
Analysis.create(url: 'http://www.google.com', is_scan_completed: 0, analysis_date: '2018-01-19 01:01:23.442000', user_id: 1)
Analysis.create(url: 'http://www.nearsoft.com/', is_scan_completed: 1, analysis_date: '2018-02-22 01:01:23.442000', user_id: 1)
Analysis.create(url: 'http://www.youtube.com', is_scan_completed: 1, analysis_date: '2018-09-06 01:01:23.442000', user_id: 1)
Analysis.create(url: 'http://www.training.nearsoft.com', is_scan_completed: 0, analysis_date: '2018-04-14 01:01:23.442000', user_id: 1)
Analysis.create(url: 'https://www.dropbox.com', is_scan_completed: 1, analysis_date: '2018-06-10 01:01:23.442000', user_id: 1)
Analysis.create(url: 'https://hootsuite.com', is_scan_completed: 1, analysis_date: '2018-06-10 01:01:23.442000', user_id: 1)
Analysis.create(url: 'https://materializecss.com', is_scan_completed: 0, analysis_date: '2018-04-14 01:01:23.442000', user_id: 2)
Analysis.create(url: 'https://laracasts.com', is_scan_completed: 0, analysis_date: '2018-04-10 01:01:23.442000', user_id: 2)
Analysis.create(url: 'https://www.apple.com', is_scan_completed: 0, analysis_date: '2018-04-10 01:01:23.442000', user_id: 2)
Analysis.create(url: 'http://www.facebook.com', is_scan_completed: 0, analysis_date: '2018-09-06 01:01:23.442000', user_id: 2)
Analysis.create(url: 'https://bitfountain.teachable.com', is_scan_completed: 0, analysis_date: '2018-06-11 01:01:23.442000', user_id: 2)


AnalysisTestsVulnerability.create(vulnerability_id: 1, analyses_id: 1)
AnalysisTestsVulnerability.create(vulnerability_id: 2, analyses_id: 1)
AnalysisTestsVulnerability.create(vulnerability_id: 1, analyses_id: 2)
AnalysisTestsVulnerability.create(vulnerability_id: 2, analyses_id: 3)
AnalysisTestsVulnerability.create(vulnerability_id: 1, analyses_id: 3)
AnalysisTestsVulnerability.create(vulnerability_id: 1, analyses_id: 4)
AnalysisTestsVulnerability.create(vulnerability_id: 2, analyses_id: 5)
AnalysisTestsVulnerability.create(vulnerability_id: 1, analyses_id: 6)
AnalysisTestsVulnerability.create(vulnerability_id: 2, analyses_id: 7)


SecurityFlaw.create(url: "http://www.xyzpub.com/en/ruby-on-rails/", payload: "asndajsnda", vulnerability_id: 1,analyses_id: 1 )
SecurityFlaw.create(url: "https://www.raywenderlich.com", payload: "asndajsnda", vulnerability_id: 2,analyses_id: 1 )
SecurityFlaw.create(url: "http://www.google.com", payload: "asndajsnda", vulnerability_id: 1,analyses_id: 2 )
SecurityFlaw.create(url: "http://www.nearsoft.com/", payload: "asndajsnda", vulnerability_id: 1,analyses_id: 3 )
SecurityFlaw.create(url: "http://www.youtube.com", payload: "asndajsnda", vulnerability_id: 1,analyses_id: 4 )
SecurityFlaw.create(url: "http://www.training.nearsoft.com", payload: "asndajsnda", vulnerability_id: 2,analyses_id: 5 )