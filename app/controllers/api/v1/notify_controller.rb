# frozen_string_literal: true

module Api
  module V1
    class NotifyController < ApplicationController
      # skip_before_action :verify_authenticity_token
      protect_from_forgery with: :null_session, if: proc { |c| c.request.format.json? }

      def notify
        url = params[:url]
        id_scan = params[:idScan]
        vulnerabilities = params[:vulnerabilities]
        vulnerabilities.each do |vulnerability|
          vulnerability_id = find_vulnerability_id(vulnerability)
          create_security_flaw(url, vulnerability_id, id_scan)
        end
        # Que regresamos a Python?
        render json: { 'message': 'Success' }
      end

      def update_scan(id_scan)
        logger.info("Updating scanner with id #{id_scan}...")
        scanner = Analysis.find(id_scan)
        scanner.update(is_scan_completed: 1)
        logger.info('Updated!')
      end

      def create_security_flaw(url, vulnerability_id, analysis_id, payload = '')
        logger.info('Creating Security Flaw...')
        SecurityFlaw.create(url: url, payload: payload, vulnerability_id: vulnerability_id, analyses_id: analysis_id)
        logger.info('Created!')
      end

      def find_vulnerability_id(vulnerability_name)
        vulnerability = Vulnerability.where(['name like ?', "%#{vulnerability_name}%"]).first
        vulnerability.id
      end
    end
  end
end
