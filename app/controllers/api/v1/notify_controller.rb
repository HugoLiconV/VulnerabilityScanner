# frozen_string_literal: true

module Api
  module V1
    class NotifyController < ActionController::Base
      # skip_before_action :verify_authenticity_token

      protect_from_forgery with: :null_session, if: proc { |c| c.request.format.json? }

      def notify
        url = params[:URL_Tested]
        id_scan = params[:IdScann]
        vulnerabilities = params[:Results]
        process_params(vulnerabilities, url, id_scan)
        update_scan(id_scan)
        render json: { 'message': 'done' }
      end

      def process_params(vulnerabilities, url, id_scan)
        vulnerabilities.each do |vulnerability|
          vulnerability_alias = vulnerability[:Vulnerability]
          vulnerability_status = vulnerability[:VulnerabilityStatus]
          vulnerability_id = find_vulnerability_id(vulnerability_alias)
          if vulnerability_status
            create_security_flaw(url, vulnerability_id, id_scan)
          end
        end
      end

      def print_debug(str, title = '')
        puts "***************#{title}*****************"
        puts "\t#{str}"
        puts "***********END*#{title}*****************"
      end

      def update_scan(id_scan)
        logger.info("Updating scanner with id #{id_scan}...")
        scanner = Analysis.find(id_scan)
        scanner.update(is_scan_completed: 1)
        logger.info('Updated!')
      end

      def create_security_flaw(url, vulnerability_id, analysis_id, payload = '')
        logger.info('Creating Security Flaw...')
        SecurityFlaw.create(url: url, payload: payload,
                            vulnerability_id: vulnerability_id, analyses_id: analysis_id)
        logger.info('Created!')
      end

      def find_vulnerability_id(vulnerability_alias)
        Vulnerability.find_by_alias(vulnerability_alias).id?
      end
    end
  end
end
